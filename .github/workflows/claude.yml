name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      ((github.event_name == 'issue_comment' && 
        contains(github.event.comment.body, '@claude') &&
        contains(fromJSON('["OWNER", "COLLABORATOR"]'), github.event.comment.author_association)) ||
       (github.event_name == 'pull_request_review_comment' && 
        contains(github.event.comment.body, '@claude') &&
        contains(fromJSON('["OWNER", "COLLABORATOR"]'), github.event.comment.author_association)) ||
       (github.event_name == 'pull_request_review' && 
        contains(github.event.review.body, '@claude') &&
        contains(fromJSON('["OWNER", "COLLABORATOR"]'), github.event.review.author_association)) ||
       (github.event_name == 'issues' && 
        (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')) &&
        contains(fromJSON('["OWNER", "COLLABORATOR"]'), github.event.issue.author_association)))
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git operations
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Set up environment with uv
        run: |
          uv venv
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"
      
      - name: Configure git
        run: |
          git config --global user.name "Claude[bot]"
          git config --global user.email "claude-bot@anthropic.com"

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          allowed_tools: |
            Bash(git add:*),
            Bash(git commit:*),
            Bash(git commit -m:*),
            Bash(git push:*),
            Bash(git status:*),
            Bash(git diff:*),
            Bash(git log:*),
            Bash(git:*),
            Bash(uv:*),
            Bash(python:*),
            Bash(python3:*),
            Bash(pytest:*),
            Bash(ruff:*),
            Bash(mypy:*),
            Bash(pre-commit:*),
            Bash(source:*),
            Bash(ls:*),
            Bash(cat:*),
            Bash(echo:*),
            Bash(pwd:*),
            Bash(cd:*),
            Bash(pip:*),
            Bash(which:*)
          
          # Optional: Add custom instructions for Claude to customize its behavior for your project
          custom_instructions: |
            Follow the project's BDD/TDD approach as documented in CLAUDE.md
            Ensure all code follows ruff formatting and passes mypy type checking
            Write tests following the describe/it pattern with pytest
            Respect the test organization: unit/, integration/, acceptance/, e2e/
            
            The environment is pre-configured with:
            - Python 3.13 with uv package manager
            - Virtual environment activated in .venv
            - All dev dependencies installed via 'uv pip install -e ".[dev]"'
            - You can run pytest, ruff, mypy, and pre-commit directly
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

